/**
 * 并查集
 * 场景：连接问题（比路径问题回答的要少）
 * 模型：连接的点有共同的祖先，不连接的则没有。
 * 接口：判断两个点是否相连，连接两个点。（不重要的还有获取所有节点的个数）
 * 实现：基于数组的索引位置实现递归查找，从性能角度不断优化，引入rank, 路径压缩等话题。
 * 最佳实践： 1-6是演化版本，5其实比6还好，6有个函数递归调用。记住UnionFind的模板代码就可以了。
 * 参考：1.慕课网-《玩转数据结构 从入门到进阶》的第11章
 */
package cn.cal.javase.datastructure.unionfind;